name: CI

on:
  pull_request:
    branches: [master, main]
  push:
    branches: [master, main]

env:
  NODE_VERSION: '20.x'

jobs:
  lint-and-type-check:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Configure npm retry for network flakiness
        run: npm config set fetch-retry-maxtimeout 60000 && npm config set fetch-retry-mintimeout 20000 && npm config set fetch-retries 5

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript type check (API + Shared only for MVP)
        run: |
          npm run type-check --workspace=packages/shared
          npm run type-check --workspace=apps/api

      - name: Run ESLint (API + Shared)
        run: |
          npm run lint --workspace=apps/api
          npm run lint --workspace=packages/shared

      - name: Check Prettier formatting (API + Shared)
        run: npx prettier --check --ignore-unknown "apps/api/**/*.{ts,tsx,js,json,md}" "packages/shared/**/*.{ts,tsx,js,json,md}"

  test-api:
    name: Test API Backend
    runs-on: ubuntu-latest
    needs: lint-and-type-check

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Configure npm retry for network flakiness
        run: npm config set fetch-retry-maxtimeout 60000 && npm config set fetch-retry-mintimeout 20000 && npm config set fetch-retries 5

      - name: Install dependencies
        run: npm ci

      - name: Run API tests with coverage
        run: npm test --workspace=apps/api -- --coverage
        env:
          CI: true
          NODE_ENV: test

  test-mobile-v2:
    name: Test Mobile App (mobile-v2)
    runs-on: ubuntu-latest
    needs: lint-and-type-check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      - name: Configure npm retry for network flakiness
        run: npm config set fetch-retry-maxtimeout 60000 && npm config set fetch-retry-mintimeout 20000 && npm config set fetch-retries 5
      - name: Install dependencies
        run: npm ci
      - name: Run mobile-v2 tests
        run: npm test --workspace=apps/mobile-v2
        env:
          CI: true

  build:
    name: Build Applications
    runs-on: ubuntu-latest
    needs: [test-api]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build shared package
        run: npm run build --workspace=packages/shared

      - name: Build API
        run: npm run build --workspace=apps/api

      - name: Upload API build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: api-build
          path: apps/api/dist/
          retention-days: 7

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint-and-type-check

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit (critical only)
        run: npm audit --audit-level=critical
        continue-on-error: true

      - name: Check for vulnerabilities (critical only)
        run: npx audit-ci --critical
        continue-on-error: true

  coverage:
    name: Test Coverage
    runs-on: ubuntu-latest
    needs: [test-api]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage (API only; mobile archived)
        run: |
          npm run test --workspace=apps/api -- --coverage
        env:
          CI: true

      - name: Upload coverage reports (API only)
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            apps/api/coverage/
          retention-days: 7
